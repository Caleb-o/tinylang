class Iterator {
	var idx;
	var length;
	var arr;

	function Iterator(arr) {
		self.idx = 0;
		self.length = builtin.len(arr);
		self.arr = arr;
	}

	function next() {
		self.idx = self.idx + 1;
		if self.idx < self.length {
			return self.arr[self.idx-1];
		}
		return self.arr[self.length-1];
	}

	function done() {
		return self.idx >= self.length;
	}

	function refresh() {
		self.idx = 0;
		self.length = builtin.len(self.arr);
	}

	function map(fn) {
		self.refresh();
		var values = [];

		while !self.done() {
			let element = self.next();
			values = values + [fn(element)];
		}

		self.arr = values;

		return self;
	}

	function filter(fn) {
		self.refresh();
		var values = [];

		while !self.done() {
			let element = self.next();
			let result = fn(element);

			builtin.assertm(builtin.type_name(result) == "bool", "Filter predicate must return a boolean");

			if result {
				values = values + [element];
			}
		}

		self.arr = values;

		return self;
	}

	function rev() {
		self.refresh();
		var values = [];

		while !self.done() {
			let element = self.next();
			values = [element] + values;
		}

		self.arr = values;

		return self;
	}

	function collect() {
		return self.arr;
	}
}


let list = [1, 2, 3, 4, 5, 6, 7, 8];
let list2 = Iterator(list)
				.map(function(item) { return item * 3; })
				.filter(function(item) { return builtin.mod(item, 2) == 0; })
				.rev()
				.collect();

print(list2);